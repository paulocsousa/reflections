When would you want to use a remote repository rather than keeping all your work local?
  It's useful to use a remote repository when I need or when a project need or have
  more than one contributor, the remote repository would be a central repository
  where all contributors can push or pull commits and contribute to the project in
  one single place where all files will be placed and updated.
  A remote repository can be useful too for backup, making a copy of a local 
  repository in a remote place.
  

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
  Because I might be working with a file that was updated with new code by another 
  developer and if git automatically pull that changes to my local repository it 
  might have conflicts.
  
  
Describe the differences between forks, clones, and branches. When would you use one 
instead of another?
  A fork works in GitHub context, it's like a clone of a repository but it keeps
  a link to the original repository. A Clone is like it says it's a clone of a
  repository. And finally a branches operates on repositories, I can create a
  branch at a specific time in commits and go in a different way. A branch is
  a ramification of the master or the main branch at that point or state, 
  where I can have or test different code. I would use forks when I want to
  clone a repository in GitHub, or keep a connection to the original repository,
  a clone when I want to clone a local repository or a remote repository, and
  a branch when I want to create a ramitication of the main branch at a 
  determined time in repository history to have or test a different version
  of the code.
  
  
What is the benefit of having a copy of the last known state of the remote stored locally?
  The benefit of having a copy of the last known state of the remote stored locally is
  that I can update my local remote branch without changing my local master branch,
  I can see what was introduced in the repository/branches after my last synchronization,
  I can see if there's any conflicts with my changes and if there's I can merged them 
  into my owns. And if I'll be offline for a while I can work with the new changes
  that were introduced offline and then send them to remote when I get online.
  
  
How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?
  Collaboration without Git or GitHub probably I'll use another version control 
  software or if there was none created yet, probably I'll use simples files
  and exchange my changes in the files with my peers, but this way it'll
  be more difficult too see conflicts between my changes and changes from
  others, collaborators would need to tell others what they had changed so
  others could know what was changed, keeping track of changes, and if I want
  to go back in a "commit" it'll be harder. Without Git or GitHub we would not
  need to learn a new tool, it's the only benefit I see not using Git or GitHub,
  however it would be more useful in many ways using Git or GitHub to keep track
  of a project, the changes and as a backup too.
  
  