What happens when you initialize a repository? Why do you need to do it?

	When I initialize a new repository the git system creates a folder 
	named .git with metadata of this repository to track that directory.
	I need to do it to make git track that repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is the intermediate between the working directory
	and the repository, it bridge them, connects them, make the connection
	from the working directory and the repository, it acts as a middle area.
	Like its name is a staging area, where we can add files before making
	a commit to the repository. The value it offers are, it helps make
	commits more meaningful, we can think what files we want to add to that
	commit and if we want to go back and remove a file from that "commit"
	we remove it from the staging area. So it's useful and if we make a mistake
	we can go back, and when we were sure we can commit. It's a middle point
	where we can make a reflection.

How can you use the staging area to make sure you have one commit per logical
change?

	I can use the staging area as a middle point to reflect and think what I
	want to commit in that commit, and that way I can make a commit per
	logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When I want to make an experimental feature without changing the code base,
	and have a current version working. Or when a need to make something 
	personalized for a client for example or a premium version of the application,
	or a version in another language. Maintaining the original version intact and
	doing my experiments on the others or working in a separated version in 
	another language. Branches help maintain things organized. And working in
	different versions of the master version without changing it or breaking it.
	

How do the diagrams help you visualize the branch structure?

	Diagrams helps me visualize the branch structure more clearly, so I can see
	each commit's parent till the initial commit. It's easier to see the
	branch in a diagram because it's visual, and we can have a picture of the
	all branch at once. And it's easier to understand how branches and the
	repository works with a visual element.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
